{"ast":null,"code":"var _jsxFileName = \"E:\\\\Full-Stack\\\\Front-End\\\\Reactjs\\\\src\\\\Component\\\\FunctionalComponent\\\\14UseCallbackHooksInFunctionalCompo.jsx\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst funccount = new Set();\nconst UseCallbackHooksInFunctionalCompo = () => {\n  _s();\n  const [count, setCount] = useState(0);\n  const [number, setNumber] = useState(0);\n  // const incrementCounter = () => {\n  //     console.log(\"incrementCounter\");\n  //     setCount(count + 1);\n  // };\n  // const decrementCounter = () => {\n  //     console.log(\"decrementCounter\");\n  //     setCount(count - 1);\n  // };\n  // const incrementNumber = () => {\n  //     console.log(\"incrementNumber\");\n  //     setNumber(number + 1);\n  // };\n  // const incrementCounter = useCallback(() => {\n  //     setCount(count + 1);\n  // });\n  // const decrementCounter = useCallback(() => {\n  //     setCount(count - 1);\n  // });\n  // const incrementNumber = useCallback(() => {\n  //     setNumber(number + 1);\n  // });\n  // const incrementCounter = useCallback(() => {\n  //     setCount(count + 1);\n  // }, []);\n  // const decrementCounter = useCallback(() => {\n  //     setCount(count - 1);\n  // }, []);\n  // const incrementNumber = useCallback(() => {\n  //     setNumber(number + 1);\n  // }, []);\n  const incrementCounter = useCallback(() => {\n    setCount(count + 1);\n  }, [count]);\n  const decrementCounter = useCallback(() => {\n    setCount(count - 1);\n  }, [count]);\n  const incrementNumber = useCallback(() => {\n    setNumber(number + 1);\n  }, [number]);\n  funccount.add(incrementCounter);\n  funccount.add(decrementCounter);\n  funccount.add(incrementNumber);\n  console.log(funccount);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"alert alert-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Improving performance In React applications includes preventing unnecessary renders and reducing the time a render takes to propagate. useCallback() can help us prevent some unnecessary renders and therefore gain a performance boost.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 45\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Going back to React, when a component re-renders, every function inside of the component is recreated and therefore these functions\\u2019 references change between renders.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \" useCallback(callback, dependencies) will return a memoized instance of the callback that only changes if one of the dependencies has changed. This means that instead of recreating the function object on every re-render, we can use the same function object between renders.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"One reason to use useCallback is to prevent a component from re-rendering unless its props have changed.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"What is useCallback Syntax\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"alert alert-info\",\n      children: \"const cachedFn = useCallback(fn, dependencies)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: incrementCounter,\n      children: \"Increase counter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: decrementCounter,\n      children: \"Decrease Counter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: incrementNumber,\n      children: \"increase number\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"my-5\",\n      children: [\"Count : \", count, \" , number \", number]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(UseCallbackHooksInFunctionalCompo, \"t4Ii1Yd1aUops3SyNHbDhbeoawk=\");\n_c = UseCallbackHooksInFunctionalCompo;\nexport default UseCallbackHooksInFunctionalCompo;\nvar _c;\n$RefreshReg$(_c, \"UseCallbackHooksInFunctionalCompo\");","map":{"version":3,"names":["React","useCallback","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","funccount","Set","UseCallbackHooksInFunctionalCompo","_s","count","setCount","number","setNumber","incrementCounter","decrementCounter","incrementNumber","add","console","log","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["E:/Full-Stack/Front-End/Reactjs/src/Component/FunctionalComponent/14UseCallbackHooksInFunctionalCompo.jsx"],"sourcesContent":["import React, { useCallback, useState } from 'react';\r\n\r\n\r\nconst funccount = new Set();\r\nconst UseCallbackHooksInFunctionalCompo = () => {\r\n    const [count, setCount] = useState(0);\r\n    const [number, setNumber] = useState(0);\r\n    // const incrementCounter = () => {\r\n    //     console.log(\"incrementCounter\");\r\n    //     setCount(count + 1);\r\n    // };\r\n    // const decrementCounter = () => {\r\n    //     console.log(\"decrementCounter\");\r\n    //     setCount(count - 1);\r\n    // };\r\n    // const incrementNumber = () => {\r\n    //     console.log(\"incrementNumber\");\r\n    //     setNumber(number + 1);\r\n    // };\r\n    // const incrementCounter = useCallback(() => {\r\n    //     setCount(count + 1);\r\n    // });\r\n    // const decrementCounter = useCallback(() => {\r\n    //     setCount(count - 1);\r\n    // });\r\n    // const incrementNumber = useCallback(() => {\r\n    //     setNumber(number + 1);\r\n    // });\r\n    // const incrementCounter = useCallback(() => {\r\n    //     setCount(count + 1);\r\n    // }, []);\r\n    // const decrementCounter = useCallback(() => {\r\n    //     setCount(count - 1);\r\n    // }, []);\r\n    // const incrementNumber = useCallback(() => {\r\n    //     setNumber(number + 1);\r\n    // }, []);\r\n    const incrementCounter = useCallback(() => {\r\n        setCount(count + 1);\r\n    }, [count]);\r\n    const decrementCounter = useCallback(() => {\r\n        setCount(count - 1);\r\n    }, [count]);\r\n    const incrementNumber = useCallback(() => {\r\n        setNumber(number + 1);\r\n    }, [number]);\r\n    funccount.add(incrementCounter);\r\n    funccount.add(decrementCounter);\r\n    funccount.add(incrementNumber);\r\n    console.log(funccount);\r\n    return (\r\n        <>\r\n            <p className='alert alert-info'><p>Improving performance In React applications includes preventing unnecessary renders and reducing the time a render takes to propagate. useCallback() can help us prevent some unnecessary renders and therefore gain a performance boost.</p>\r\n                <p>Going back to React, when a component re-renders, every function inside of the component is recreated and therefore these functionsâ€™ references change between renders.</p>\r\n                <p> useCallback(callback, dependencies) will return a memoized instance of the callback that only changes if one of the dependencies has changed. This means that instead of recreating the function object on every re-render, we can use the same function object between renders.</p>\r\n                <p>One reason to use useCallback is to prevent a component from re-rendering unless its props have changed.</p>\r\n            </p>\r\n\r\n            <h2>What is useCallback Syntax</h2>\r\n            <p className='alert alert-info'>const cachedFn = useCallback(fn, dependencies)</p>\r\n            {/* <button onClick={handler}>Change State Of Parent Component</button> */}\r\n            <button onClick={incrementCounter}>Increase counter</button>\r\n            <button onClick={decrementCounter}>Decrease Counter</button>\r\n            <button onClick={incrementNumber}>increase number</button>\r\n            <p className='my-5' >Count : {count} , number {number}</p>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default UseCallbackHooksInFunctionalCompo;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}