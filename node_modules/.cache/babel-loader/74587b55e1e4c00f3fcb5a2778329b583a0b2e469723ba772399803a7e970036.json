{"ast":null,"code":"var _jsxFileName = \"E:\\\\Full-Stack\\\\Front-End\\\\Reactjs\\\\src\\\\Component\\\\FunctionalComponent\\\\08RestVsSpreadComponentInReact.jsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst RestVsSpreadComponentInReact = () => {\n  const sum = (x, y, z) => {\n    return x + y + z;\n  };\n  const numbers = [1, 2, 3];\n  console.log(sum(...numbers));\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \" The spread (...) syntax allows an iterable, such as an array or string, to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected. In an object literal, the spread syntax enumerates the properties of an object and adds the key-value pairs to the object being created.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \" Spread syntax looks exactly like rest syntax. In a way, spread syntax is the opposite of rest syntax. Spread syntax \\\"expands\\\" an array into its elements, while rest syntax collects multiple elements and \\\"condenses\\\" them into a single element. See rest parameters and rest property.  \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert alert-info p-3\",\n        children: [\"const sum = (x, y, z) => { \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 52\n        }, this), \"\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0   return x + y + z; \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 74\n        }, this), \"} \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 24\n        }, this), \"const numbers = [1, 2, 3]; \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 44\n        }, this), \"console.log(sum(...numbers)); \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 47\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert alert-info p-3\",\n        children: [\"function myFunction(x, y, z) {  }\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 60\n        }, this), \"const args = [0, 1, 2];  \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 42\n        }, this), \"myFunction.apply(null, args);  \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 48\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Rest\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert alert-info p-3\",\n        children: [\"function myFunction(v, w, x, y, z)  {  }\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 67\n        }, this), \"const args = [0, 1]; myFunction(-1, ...args, 2, ...[3]); const parts = [\\\"shoulders\\\", \\\"knees\\\"]; const lyrics = [\\\"head\\\", ...parts, \\\"and\\\", \\\"toes\\\"]; //  [\\\"head\\\", \\\"shoulders\\\", \\\"knees\\\", \\\"and\\\", \\\"toes\\\"] const sum = (x, ...y) => { \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 52\n        }, this), \"\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0   return x + y + z; \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 74\n        }, this), \"} \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 24\n        }, this), \"console.log(sum(12,45,98,654)); \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 49\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 10\n    }, this)\n  }, void 0, false);\n};\n_c = RestVsSpreadComponentInReact;\nexport default RestVsSpreadComponentInReact;\nvar _c;\n$RefreshReg$(_c, \"RestVsSpreadComponentInReact\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Fragment","_Fragment","RestVsSpreadComponentInReact","sum","x","y","z","numbers","console","log","children","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/Full-Stack/Front-End/Reactjs/src/Component/FunctionalComponent/08RestVsSpreadComponentInReact.jsx"],"sourcesContent":["import React from 'react';\n\nconst RestVsSpreadComponentInReact = () => {\n    const sum = (x, y, z) => {\n        return x + y + z;\n    }\n    const numbers = [1, 2, 3];\n    console.log(sum(...numbers));\n    return (\n        <>\n         <div className=\"container\">\n\n            <p> The spread (...) syntax allows an iterable, such as an array or string, to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected. In an object literal, the spread syntax enumerates the properties of an object and adds the key-value pairs to the object being created.</p>\n            <p> Spread syntax looks exactly like rest syntax. In a way, spread syntax is the opposite of rest syntax. Spread syntax \"expands\" an array into its elements, while rest syntax collects multiple elements and \"condenses\" them into a single element. See rest parameters and rest property.  </p>\n            <div className=\"alert alert-info p-3\">\n                const sum = (x, y, z) =&gt; &#123; <br />\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   return x + y + z; <br />\n                &#125; <br />\n                const numbers = [1, 2, 3]; <br />\n                console.log(sum(...numbers)); <br />\n            </div>\n\n            <div className=\"alert alert-info p-3\">\n                function myFunction(x, y, z) &#123;  &#125;<br />\n                const args = [0, 1, 2];  <br />\n                myFunction.apply(null, args);  <br />\n            </div>\n            <h3>Rest</h3>\n            <div className=\"alert alert-info p-3\">\n                function myFunction(v, w, x, y, z)  &#123;  &#125;<br />\n                const args = [0, 1];\n                myFunction(-1, ...args, 2, ...[3]);\n                const parts = [\"shoulders\", \"knees\"];\n                const lyrics = [\"head\", ...parts, \"and\", \"toes\"];\n            //  [\"head\", \"shoulders\", \"knees\", \"and\", \"toes\"]\n\n\n                const sum = (x, ...y) =&gt; &#123; <br />\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   return x + y + z; <br />\n                &#125; <br />\n                \n                console.log(sum(12,45,98,654)); <br />\n            </div>\n            </div>\n        </>\n    );\n};\n\nexport default RestVsSpreadComponentInReact;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}